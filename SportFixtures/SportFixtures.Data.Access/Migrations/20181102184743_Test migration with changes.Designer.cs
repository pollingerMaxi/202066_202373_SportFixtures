// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportFixtures.Data.Access;

namespace SportFixtures.Data.Access.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20181102184743_Test migration with changes")]
    partial class Testmigrationwithchanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportFixtures.Data.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EncounterId");

                    b.Property<string>("Text");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.Encounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<int>("SportId");

                    b.HasKey("Id");

                    b.ToTable("Encounters");
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.PositionInEncounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EncounterId");

                    b.Property<int>("Position");

                    b.Property<int>("TeamId");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.ToTable("PositionInEncounter");
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EncounterMode");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EncounterId");

                    b.Property<string>("Name");

                    b.Property<string>("Photo");

                    b.Property<int>("SportId");

                    b.HasKey("Id");

                    b.HasIndex("EncounterId");

                    b.HasIndex("SportId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.Property<Guid?>("Token");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = 1, Email = "admin@admin.com", LastName = "Admins LastName", Name = "Admins Name", Password = "admin", Role = 1, Username = "admin" },
                        new { Id = 2, Email = "user@user.com", LastName = "Users LastName", Name = "Normal user", Password = "user", Role = 0, Username = "user" }
                    );
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.UsersTeams", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("TeamId");

                    b.HasKey("UserId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("UsersTeams");
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.Comment", b =>
                {
                    b.HasOne("SportFixtures.Data.Entities.Encounter")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.PositionInEncounter", b =>
                {
                    b.HasOne("SportFixtures.Data.Entities.Encounter")
                        .WithMany("Results")
                        .HasForeignKey("EncounterId");
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.Team", b =>
                {
                    b.HasOne("SportFixtures.Data.Entities.Encounter")
                        .WithMany("Teams")
                        .HasForeignKey("EncounterId");

                    b.HasOne("SportFixtures.Data.Entities.Sport")
                        .WithMany("Teams")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportFixtures.Data.Entities.UsersTeams", b =>
                {
                    b.HasOne("SportFixtures.Data.Entities.Team", "Team")
                        .WithMany("FavoritedBy")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportFixtures.Data.Entities.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
